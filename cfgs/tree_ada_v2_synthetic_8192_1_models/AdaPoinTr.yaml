optimizer : {
  type: AdamW,
  kwargs: {
  lr : 0.001, # Instead of 0.0001 because it's a fine-tuning
  weight_decay : 0.0005
}}

scheduler: {
  type: LambdaLR,
  kwargs: {
  decay_step: 21,
  lr_decay: 0.9,
  lowest_decay: 0.02  # min lr = lowest_decay * lr
}}

bnmscheduler: {
  type: Lambda,
  kwargs: {
  decay_step: 21,
  bn_decay: 0.5,
  bn_momentum: 0.9,
  lowest_decay: 0.01
}}

dataset : {
  train : { _base_: cfgs/dataset_configs/tree_ada_v2_synthetic_8192_1.yaml, 
            others: {subset: 'train'}},
  val : { _base_: cfgs/dataset_configs/tree_ada_v2_synthetic_8192_1.yaml, 
            others: {subset: 'val'}},
  test : { _base_: cfgs/dataset_configs/tree_ada_v2_synthetic_8192_1.yaml, 
            others: {subset: 'test'}}}     
            
model : {
    NAME: AdaPoinTr, 
    num_query: 512, 
    num_points: 8192,
    center_num: [512, 256],
    global_feature_dim: 1024, 
    encoder_type: graph,
    decoder_type: fc,
    encoder_config: {
      embed_dim: 384,
      depth: 6,
      num_heads: 6,
      k: 8,
      n_group: 2,
      mlp_ratio: 2.,
      block_style_list: ['attn-graph', 'attn', 'attn', 'attn', 'attn', 'attn'], 
      combine_style: 'concat',
    },
    decoder_config: {
      embed_dim: 384,
      depth: 8,
      num_heads: 6,
      k: 8,
      n_group: 2,
      mlp_ratio: 2.,
      self_attn_block_style_list: ['attn-graph', 'attn', 'attn', 'attn', 'attn', 'attn', 'attn', 'attn'], 
      self_attn_combine_style: 'concat',
      cross_attn_block_style_list: ['attn-graph', 'attn', 'attn', 'attn', 'attn', 'attn', 'attn', 'attn'], 
      cross_attn_combine_style: 'concat',
    }
}
  
total_bs : 6               # Actual batch size per step (small to fit in 8GB GPU memory)
step_per_update : 3        # Accumulate gradients for 3 steps before updating weights
                           # eg. → Simulates an effective batch size of 6 × 3 = 18
                           # → Useful for stable training on memory-limited hardware

max_epoch : 600            

# Evaluation metric
consider_metric: CDL2      # Use Chamfer Distance L2 (squared Euclidean distance) 
